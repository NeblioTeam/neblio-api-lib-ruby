=begin
#Neblio REST API Suite

#APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

OpenAPI spec version: 1.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class GetTransactionInfoResponse
    # Transaction in raw hex
    attr_accessor :hex

    # TXID of transaction
    attr_accessor :txid

    # Transaction version
    attr_accessor :version

    # Transaction locktime
    attr_accessor :locktime

    # Array of transaction inputs
    attr_accessor :vin

    # Array of transaction outputs
    attr_accessor :vout

    # Block time of this transaction
    attr_accessor :blocktime

    # Block height of this transaction
    attr_accessor :blockheight

    # Total NEBL sent in this transaction in satoshis
    attr_accessor :totalsent

    # Total NEBL used as fee for this transcation in satoshis
    attr_accessor :fee

    # Hash of the block this transaction is in
    attr_accessor :blockhash

    # Transaction time
    attr_accessor :time

    # Number of transaction confirmations
    attr_accessor :confirmations


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hex' => :'hex',
        :'txid' => :'txid',
        :'version' => :'version',
        :'locktime' => :'locktime',
        :'vin' => :'vin',
        :'vout' => :'vout',
        :'blocktime' => :'blocktime',
        :'blockheight' => :'blockheight',
        :'totalsent' => :'totalsent',
        :'fee' => :'fee',
        :'blockhash' => :'blockhash',
        :'time' => :'time',
        :'confirmations' => :'confirmations'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'hex' => :'String',
        :'txid' => :'String',
        :'version' => :'Float',
        :'locktime' => :'Float',
        :'vin' => :'Array<GetTransactionInfoResponseVin>',
        :'vout' => :'Array<GetTransactionInfoResponseVout>',
        :'blocktime' => :'Float',
        :'blockheight' => :'Float',
        :'totalsent' => :'Float',
        :'fee' => :'Float',
        :'blockhash' => :'String',
        :'time' => :'Float',
        :'confirmations' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'hex')
        self.hex = attributes[:'hex']
      end

      if attributes.has_key?(:'txid')
        self.txid = attributes[:'txid']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'locktime')
        self.locktime = attributes[:'locktime']
      end

      if attributes.has_key?(:'vin')
        if (value = attributes[:'vin']).is_a?(Array)
          self.vin = value
        end
      end

      if attributes.has_key?(:'vout')
        if (value = attributes[:'vout']).is_a?(Array)
          self.vout = value
        end
      end

      if attributes.has_key?(:'blocktime')
        self.blocktime = attributes[:'blocktime']
      end

      if attributes.has_key?(:'blockheight')
        self.blockheight = attributes[:'blockheight']
      end

      if attributes.has_key?(:'totalsent')
        self.totalsent = attributes[:'totalsent']
      end

      if attributes.has_key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.has_key?(:'blockhash')
        self.blockhash = attributes[:'blockhash']
      end

      if attributes.has_key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.has_key?(:'confirmations')
        self.confirmations = attributes[:'confirmations']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hex == o.hex &&
          txid == o.txid &&
          version == o.version &&
          locktime == o.locktime &&
          vin == o.vin &&
          vout == o.vout &&
          blocktime == o.blocktime &&
          blockheight == o.blockheight &&
          totalsent == o.totalsent &&
          fee == o.fee &&
          blockhash == o.blockhash &&
          time == o.time &&
          confirmations == o.confirmations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [hex, txid, version, locktime, vin, vout, blocktime, blockheight, totalsent, fee, blockhash, time, confirmations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
