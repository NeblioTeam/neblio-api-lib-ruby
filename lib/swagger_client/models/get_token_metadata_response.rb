=begin
#Neblio REST API Suite

#APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class GetTokenMetadataResponse
    # ID of the token
    attr_accessor :token_id

    # Decimal places the token is divisible to
    attr_accessor :divisibility

    # Whether issuance of more tokens is locked
    attr_accessor :lock_status

    # Whether the tokens are aggregatable
    attr_accessor :aggregation_policy

    # Total number of tokens in supply
    attr_accessor :total_supply

    # Total number of addresses this token is held at
    attr_accessor :num_of_holders

    # Total number of transactions of this token
    attr_accessor :num_of_transfers

    # Total number of times this token has been issued
    attr_accessor :numof_issuance

    # Number of times tokens have been burned
    attr_accessor :num_of_burns

    # Block number token was issued in
    attr_accessor :first_block

    # TXID the token was issued with
    attr_accessor :issuance_txid

    # Address that issued the tokens
    attr_accessor :issue_address

    attr_accessor :metadata_of_issuance

    attr_accessor :metadata_of_utxo


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token_id' => :'tokenId',
        :'divisibility' => :'divisibility',
        :'lock_status' => :'lockStatus',
        :'aggregation_policy' => :'aggregationPolicy',
        :'total_supply' => :'totalSupply',
        :'num_of_holders' => :'numOfHolders',
        :'num_of_transfers' => :'numOfTransfers',
        :'numof_issuance' => :'numofIssuance',
        :'num_of_burns' => :'numOfBurns',
        :'first_block' => :'firstBlock',
        :'issuance_txid' => :'issuanceTxid',
        :'issue_address' => :'issueAddress',
        :'metadata_of_issuance' => :'metadataOfIssuance',
        :'metadata_of_utxo' => :'metadataOfUtxo'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'token_id' => :'String',
        :'divisibility' => :'Float',
        :'lock_status' => :'BOOLEAN',
        :'aggregation_policy' => :'String',
        :'total_supply' => :'Float',
        :'num_of_holders' => :'Float',
        :'num_of_transfers' => :'Float',
        :'numof_issuance' => :'Float',
        :'num_of_burns' => :'Float',
        :'first_block' => :'Float',
        :'issuance_txid' => :'String',
        :'issue_address' => :'String',
        :'metadata_of_issuance' => :'GetTokenMetadataResponseMetadataOfIssuance',
        :'metadata_of_utxo' => :'GetTokenMetadataResponseMetadataOfIssuance'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'tokenId')
        self.token_id = attributes[:'tokenId']
      end

      if attributes.has_key?(:'divisibility')
        self.divisibility = attributes[:'divisibility']
      end

      if attributes.has_key?(:'lockStatus')
        self.lock_status = attributes[:'lockStatus']
      end

      if attributes.has_key?(:'aggregationPolicy')
        self.aggregation_policy = attributes[:'aggregationPolicy']
      end

      if attributes.has_key?(:'totalSupply')
        self.total_supply = attributes[:'totalSupply']
      end

      if attributes.has_key?(:'numOfHolders')
        self.num_of_holders = attributes[:'numOfHolders']
      end

      if attributes.has_key?(:'numOfTransfers')
        self.num_of_transfers = attributes[:'numOfTransfers']
      end

      if attributes.has_key?(:'numofIssuance')
        self.numof_issuance = attributes[:'numofIssuance']
      end

      if attributes.has_key?(:'numOfBurns')
        self.num_of_burns = attributes[:'numOfBurns']
      end

      if attributes.has_key?(:'firstBlock')
        self.first_block = attributes[:'firstBlock']
      end

      if attributes.has_key?(:'issuanceTxid')
        self.issuance_txid = attributes[:'issuanceTxid']
      end

      if attributes.has_key?(:'issueAddress')
        self.issue_address = attributes[:'issueAddress']
      end

      if attributes.has_key?(:'metadataOfIssuance')
        self.metadata_of_issuance = attributes[:'metadataOfIssuance']
      end

      if attributes.has_key?(:'metadataOfUtxo')
        self.metadata_of_utxo = attributes[:'metadataOfUtxo']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token_id == o.token_id &&
          divisibility == o.divisibility &&
          lock_status == o.lock_status &&
          aggregation_policy == o.aggregation_policy &&
          total_supply == o.total_supply &&
          num_of_holders == o.num_of_holders &&
          num_of_transfers == o.num_of_transfers &&
          numof_issuance == o.numof_issuance &&
          num_of_burns == o.num_of_burns &&
          first_block == o.first_block &&
          issuance_txid == o.issuance_txid &&
          issue_address == o.issue_address &&
          metadata_of_issuance == o.metadata_of_issuance &&
          metadata_of_utxo == o.metadata_of_utxo
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [token_id, divisibility, lock_status, aggregation_policy, total_supply, num_of_holders, num_of_transfers, numof_issuance, num_of_burns, first_block, issuance_txid, issue_address, metadata_of_issuance, metadata_of_utxo].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
