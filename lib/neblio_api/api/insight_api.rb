=begin
#Neblio REST API Suite

#APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

OpenAPI spec version: 1.3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: unset

=end

require 'uri'

module NeblioAPI
  class InsightApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns address object
    # Returns NEBL address object containing information on a specific address
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [GetAddressResponse]
    def get_address(address, opts = {})
      data, _status_code, _headers = get_address_with_http_info(address, opts)
      data
    end

    # Returns address object
    # Returns NEBL address object containing information on a specific address
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAddressResponse, Fixnum, Hash)>] GetAddressResponse data, response status code and response headers
    def get_address_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address"
      end
      # resource path
      local_var_path = '/ins/addr/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAddressResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns address balance in sats
    # Returns NEBL address balance in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Float]
    def get_address_balance(address, opts = {})
      data, _status_code, _headers = get_address_balance_with_http_info(address, opts)
      data
    end

    # Returns address balance in sats
    # Returns NEBL address balance in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def get_address_balance_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address_balance ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address_balance"
      end
      # resource path
      local_var_path = '/ins/addr/{address}/balance'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns total received by address in sats
    # Returns total NEBL received by address in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Float]
    def get_address_total_received(address, opts = {})
      data, _status_code, _headers = get_address_total_received_with_http_info(address, opts)
      data
    end

    # Returns total received by address in sats
    # Returns total NEBL received by address in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def get_address_total_received_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address_total_received ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address_total_received"
      end
      # resource path
      local_var_path = '/ins/addr/{address}/totalReceived'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address_total_received\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns total sent by address in sats
    # Returns total NEBL sent by address in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Float]
    def get_address_total_sent(address, opts = {})
      data, _status_code, _headers = get_address_total_sent_with_http_info(address, opts)
      data
    end

    # Returns total sent by address in sats
    # Returns total NEBL sent by address in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def get_address_total_sent_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address_total_sent ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address_total_sent"
      end
      # resource path
      local_var_path = '/ins/addr/{address}/totalSent'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address_total_sent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns address unconfirmed balance in sats
    # Returns NEBL address unconfirmed balance in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Float]
    def get_address_unconfirmed_balance(address, opts = {})
      data, _status_code, _headers = get_address_unconfirmed_balance_with_http_info(address, opts)
      data
    end

    # Returns address unconfirmed balance in sats
    # Returns NEBL address unconfirmed balance in satoshis
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def get_address_unconfirmed_balance_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address_unconfirmed_balance ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address_unconfirmed_balance"
      end
      # resource path
      local_var_path = '/ins/addr/{address}/unconfirmedBalance'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address_unconfirmed_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all UTXOs at a given address
    # Returns information on each Unspent Transaction Output contained at an address
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_address_utxos(address, opts = {})
      data, _status_code, _headers = get_address_utxos_with_http_info(address, opts)
      data
    end

    # Returns all UTXOs at a given address
    # Returns information on each Unspent Transaction Output contained at an address
    # @param address Address
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_address_utxos_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_address_utxos ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling InsightApi.get_address_utxos"
      end
      # resource path
      local_var_path = '/ins/addr/{address}/utxo'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_address_utxos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information regarding a Neblio block
    # Returns blockchain data for a given block based upon the block hash
    # @param blockhash Block Hash
    # @param [Hash] opts the optional parameters
    # @return [GetBlockResponse]
    def get_block(blockhash, opts = {})
      data, _status_code, _headers = get_block_with_http_info(blockhash, opts)
      data
    end

    # Returns information regarding a Neblio block
    # Returns blockchain data for a given block based upon the block hash
    # @param blockhash Block Hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBlockResponse, Fixnum, Hash)>] GetBlockResponse data, response status code and response headers
    def get_block_with_http_info(blockhash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_block ...'
      end
      # verify the required parameter 'blockhash' is set
      if @api_client.config.client_side_validation && blockhash.nil?
        fail ArgumentError, "Missing the required parameter 'blockhash' when calling InsightApi.get_block"
      end
      # resource path
      local_var_path = '/ins/block/{blockhash}'.sub('{' + 'blockhash' + '}', blockhash.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBlockResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns block hash of block
    # Returns the block hash of a block at a given block index
    # @param blockindex Block Index
    # @param [Hash] opts the optional parameters
    # @return [GetBlockIndexResponse]
    def get_block_index(blockindex, opts = {})
      data, _status_code, _headers = get_block_index_with_http_info(blockindex, opts)
      data
    end

    # Returns block hash of block
    # Returns the block hash of a block at a given block index
    # @param blockindex Block Index
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBlockIndexResponse, Fixnum, Hash)>] GetBlockIndexResponse data, response status code and response headers
    def get_block_index_with_http_info(blockindex, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_block_index ...'
      end
      # verify the required parameter 'blockindex' is set
      if @api_client.config.client_side_validation && blockindex.nil?
        fail ArgumentError, "Missing the required parameter 'blockindex' when calling InsightApi.get_block_index"
      end
      # resource path
      local_var_path = '/ins/block-index/{blockindex}'.sub('{' + 'blockindex' + '}', blockindex.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBlockIndexResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_block_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns raw transaction hex
    # Returns raw transaction hex representing a NEBL transaction
    # @param txid Transaction ID
    # @param [Hash] opts the optional parameters
    # @return [GetRawTxResponse]
    def get_raw_tx(txid, opts = {})
      data, _status_code, _headers = get_raw_tx_with_http_info(txid, opts)
      data
    end

    # Returns raw transaction hex
    # Returns raw transaction hex representing a NEBL transaction
    # @param txid Transaction ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRawTxResponse, Fixnum, Hash)>] GetRawTxResponse data, response status code and response headers
    def get_raw_tx_with_http_info(txid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_raw_tx ...'
      end
      # verify the required parameter 'txid' is set
      if @api_client.config.client_side_validation && txid.nil?
        fail ArgumentError, "Missing the required parameter 'txid' when calling InsightApi.get_raw_tx"
      end
      # resource path
      local_var_path = '/ins/rawtx/{txid}'.sub('{' + 'txid' + '}', txid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetRawTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_raw_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Utility API for calling several blockchain node functions
    # Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
    # @return [Object]
    def get_status(opts = {})
      data, _status_code, _headers = get_status_with_http_info(opts)
      data
    end

    # Utility API for calling several blockchain node functions
    # Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_status ...'
      end
      # resource path
      local_var_path = '/ins/status'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get node sync status
    # Returns information on the node's sync progress
    # @param [Hash] opts the optional parameters
    # @return [GetSyncResponse]
    def get_sync(opts = {})
      data, _status_code, _headers = get_sync_with_http_info(opts)
      data
    end

    # Get node sync status
    # Returns information on the node&#39;s sync progress
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSyncResponse, Fixnum, Hash)>] GetSyncResponse data, response status code and response headers
    def get_sync_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_sync ...'
      end
      # resource path
      local_var_path = '/ins/sync'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSyncResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns transaction object
    # Returns NEBL transaction object representing a NEBL transaction
    # @param txid Transaction ID
    # @param [Hash] opts the optional parameters
    # @return [GetTxResponse]
    def get_tx(txid, opts = {})
      data, _status_code, _headers = get_tx_with_http_info(txid, opts)
      data
    end

    # Returns transaction object
    # Returns NEBL transaction object representing a NEBL transaction
    # @param txid Transaction ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTxResponse, Fixnum, Hash)>] GetTxResponse data, response status code and response headers
    def get_tx_with_http_info(txid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_tx ...'
      end
      # verify the required parameter 'txid' is set
      if @api_client.config.client_side_validation && txid.nil?
        fail ArgumentError, "Missing the required parameter 'txid' when calling InsightApi.get_tx"
      end
      # resource path
      local_var_path = '/ins/tx/{txid}'.sub('{' + 'txid' + '}', txid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transactions by block or address
    # Returns all transactions by block or address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address Address
    # @option opts [String] :block Block Hash
    # @option opts [Float] :page_num Page number to display
    # @return [GetTxsResponse]
    def get_txs(opts = {})
      data, _status_code, _headers = get_txs_with_http_info(opts)
      data
    end

    # Get transactions by block or address
    # Returns all transactions by block or address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address Address
    # @option opts [String] :block Block Hash
    # @option opts [Float] :page_num Page number to display
    # @return [Array<(GetTxsResponse, Fixnum, Hash)>] GetTxsResponse data, response status code and response headers
    def get_txs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_txs ...'
      end
      # resource path
      local_var_path = '/ins/txs'

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'block'] = opts[:'block'] if !opts[:'block'].nil?
      query_params[:'pageNum'] = opts[:'page_num'] if !opts[:'page_num'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTxsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_txs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Broadcasts a signed raw transaction to the network (not NTP1 specific)
    # Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
    # @param send_tx_request Object representing a transaction to broadcast
    # @param [Hash] opts the optional parameters
    # @return [BroadcastTxResponse]
    def send_tx(send_tx_request, opts = {})
      data, _status_code, _headers = send_tx_with_http_info(send_tx_request, opts)
      data
    end

    # Broadcasts a signed raw transaction to the network (not NTP1 specific)
    # Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
    # @param send_tx_request Object representing a transaction to broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(BroadcastTxResponse, Fixnum, Hash)>] BroadcastTxResponse data, response status code and response headers
    def send_tx_with_http_info(send_tx_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.send_tx ...'
      end
      # verify the required parameter 'send_tx_request' is set
      if @api_client.config.client_side_validation && send_tx_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_tx_request' when calling InsightApi.send_tx"
      end
      # resource path
      local_var_path = '/ins/tx/send'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(send_tx_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#send_tx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
